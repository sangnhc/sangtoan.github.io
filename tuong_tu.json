{
    "Nhóm Góc": {
        "Góc giữa hai vectơ": {
            "code": "function gocVecto(a, b, c, d, e, f) { const dot_product = a * d + b * e + c * f; const norm_vector1 = Math.sqrt(a ** 2 + b ** 2 + c ** 2); const norm_vector2 = Math.sqrt(d ** 2 + e ** 2 + f ** 2); const cos_theta = dot_product / (norm_vector1 * norm_vector2); return cos_theta; }",
            "description": "Tính góc giữa hai vectơ."
        },
        "Góc giữa hai vectơ tổng đại số": {
            "code": "function gocGttd(a, b, c, d, e, f) { const dot_product = Math.abs(a * d + b * e + c * f); const norm_vector1 = Math.sqrt(a ** 2 + b ** 2 + c ** 2); const norm_vector2 = Math.sqrt(d ** 2 + e ** 2 + f ** 2); const cos_theta = dot_product / (norm_vector1 * norm_vector2); return cos_theta; }",
            "description": "Tính góc giữa hai vectơ tổng đại số."
        }
    },
    "Hàm Phân Thức": {
        "Hàm phân thức hai trên một": {
            "code": "function hamPhanThucHaiTrenMot() { while (true) { const a = Math.floor(Math.random() * 10) + 1; const c = Math.floor(Math.random() * 21) - 10; const d = Math.floor(Math.random() * 10) + 1; const e = Math.floor(Math.random() * 21) - 10; const discriminantCandidate = Math.floor(Math.random() * 100) + 1; const k = Math.floor(Math.sqrt(discriminantCandidate)); const discriminant = k * k; if (discriminant % 4 !== 0) { continue; } const bSquared = 3 * a * c + Math.floor(discriminant / 4); if (bSquared >= 0 && Math.sqrt(bSquared) % 1 === 0) { const b = Math.sqrt(bSquared); return [a, b, c, d, e]; } } }",
            "description": "Tạo hệ số ngẫu nhiên cho hàm phân thức hai trên một."
        }
    }
}
